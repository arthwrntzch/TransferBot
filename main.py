import logging
import telebot
import gspread
import random
import string
import sqlite3
import datetime
import re
from oauth2client.service_account import ServiceAccountCredentials
from telebot.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8092395793:AAF2lbSS2bnn0oAeEiqizG0t30zdbRIiv8w"
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
CREDS_FILE = "andreytelegrambot-f11896416c4f.json"
SPREADSHEET_ID = "16T0XpPEOrOTzTNd8lZKIEH4HrLMxhbO32_47qGrnmGc"

creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPES)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –¢–∞—Ä–∏—Ñ—ã
tariffs = {
    "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç 5500‚ÇΩ (3 –ø–∞—Å—Å–∞–∂–∏—Ä–∞)",
    "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç 6500‚ÇΩ (4 –ø–∞—Å—Å–∞–∂–∏—Ä–∞)",
    "crossover": "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä 7500‚ÇΩ (4 –ø–∞—Å—Å–∞–∂–∏—Ä–∞)",
    "business": "–ë–∏–∑–Ω–µ—Å 8500‚ÇΩ (4 –ø–∞—Å—Å–∞–∂–∏—Ä–∞)",
    "minivan": "–ú–∏–Ω–∏–≤—ç–Ω 9000‚ÇΩ (7 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤), 10000‚ÇΩ (8 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤)"
}

# –û–ø—Ü–∏–∏
platka_options = ["–î–∞", "–ù–µ—Ç"]
chair_options = ["–î–∞", "–ù–µ—Ç"]

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
ADMIN_PASSWORD = "admin123"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_chat_id = None  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
popular_addresses = [
    "–®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–î–æ–º–æ–¥–µ–¥–æ–≤–æ (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–í–Ω—É–∫–æ–≤–æ (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–ñ—É–∫–æ–≤—Å–∫–∏–π (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–ö–∞–∑–∞–Ω—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ö–∏–µ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ü–∞–≤–µ–ª–µ—Ü–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ö—É—Ä—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–†–∏–∂—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–°–∞–≤–µ–ª–æ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)"
]


##############################################
# –ë–ª–æ–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ë–î
##############################################

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_orders (
            user_id INTEGER,
            order_id TEXT,
            chat_id INTEGER,
            PRIMARY KEY (user_id, order_id)
        )
    ''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü chat_id
    cursor.execute("PRAGMA table_info(user_orders)")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns]

    if 'chat_id' not in column_names:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü chat_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor.execute('ALTER TABLE user_orders ADD COLUMN chat_id INTEGER')

    conn.commit()
    conn.close()


def add_order_to_db(user_id, order_id, chat_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO user_orders (user_id, order_id, chat_id) VALUES (?, ?, ?)',
                   (user_id, order_id, chat_id))
    conn.commit()
    conn.close()


def get_chat_id_by_order_id(order_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏"""
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM user_orders WHERE order_id = ?', (order_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None


def get_user_orders(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT order_id FROM user_orders WHERE user_id = ?', (user_id,))
    orders = cursor.fetchall()
    conn.close()
    return [order[0] for order in orders]


def delete_order_from_db(user_id, order_id):
    """–£–¥–∞–ª—è–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM user_orders WHERE user_id = ? AND order_id = ?',
                   (user_id, order_id))
    conn.commit()
    conn.close()


init_db()


def generate_order_number():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))


def send_to_google_sheets(chat_id, username, data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ Google Sheets, —Å–æ–±–ª—é–¥–∞—è –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤:
    1) –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (data[15])
    2) –í–æ–¥–∏—Ç–µ–ª—å (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)
    3) –ó–∞–∫–∞–∑—á–∏–∫ (@username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
    4) –í—ã–ª–µ—Ç/–ü—Ä–∏–ª–µ—Ç (data[0])
    5) –î–∞—Ç–∞ (data[1])
    6) –ü–æ–¥–∞—á–∞ –≤ (data[3])
    7) –í—Ä–µ–º—è —Ä–µ–π—Å–∞ (data[2])
    8) –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ (data[4])
    9) –ê–¥—Ä–µ—Å –û—Ç–ø—Ä (data[5])
    10) –ê–¥—Ä–µ—Å –ü—Ä–∏–± (data[6])
    11) –ö–æ–ª–≤–æ –ü–∞—Å—Å (data[7])
    12) –ö–æ–ª–≤–æ –¥–µ—Ç–µ–π (data[8])
    13) –§–ò–û (data[10])
    14) –¢–µ–ª–µ—Ñ–æ–Ω (data[11])
    15) –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ (data[12])
    16) –¢–∞—Ä–∏—Ñ (data[13])
    17) –ü–ª–∞—Ç–∫–∞ (data[14])
    18) –ö—Ä–µ—Å–ª–æ (data[9])
    """
    if len(data) < 16:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return

    application_number = data[15]  # –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    user_contact = f"@{username}" if username else (data[11] if data[11] else "-")

    new_row = [
        application_number,  # –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        "",                 # –í–æ–¥–∏—Ç–µ–ª—å (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)
        user_contact,       # –ó–∞–∫–∞–∑—á–∏–∫
        data[0],            # –í—ã–ª–µ—Ç/–ü—Ä–∏–ª–µ—Ç
        data[1],            # –î–∞—Ç–∞
        data[3],            # –ü–æ–¥–∞—á–∞ –≤
        data[2],            # –í—Ä–µ–º—è —Ä–µ–π—Å–∞
        data[4],            # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
        data[5],            # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        data[6],            # –ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è
        data[7],            # –ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        data[8],            # –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π
        data[10],           # –§–ò–û
        data[11],           # –¢–µ–ª–µ—Ñ–æ–Ω
        data[12],           # –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏
        data[13],           # –¢–∞—Ä–∏—Ñ
        data[14],           # –ü–ª–∞—Ç–∫–∞
        data[9]             # –ö—Ä–µ—Å–ª–æ
    ]
    sheet.append_row(new_row)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    if admin_chat_id:
        bot.send_message(admin_chat_id,
                         f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{application_number} –æ—Ç @{username}")

def update_google_sheets(order_id, data):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google Sheets –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤ (A-R).
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ data —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—è –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ.
    """
    orders = sheet.get_all_values()
    order_index = next((index for index, order in enumerate(orders) if order[0] == order_id), None)

    if order_index is None:
        return False  # –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

    updated_row = [
        order_id,                  # A –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        orders[order_index][1],    # B –í–æ–¥–∏—Ç–µ–ª—å (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        orders[order_index][2],    # C –ó–∞–∫–∞–∑—á–∏–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        data[1],                   # D –í—ã–ª–µ—Ç/–ü—Ä–∏–ª–µ—Ç
        data[0],                   # E –î–∞—Ç–∞
        data[3],                   # F –ü–æ–¥–∞—á–∞
        data[2],                   # G –í—Ä–µ–º—è —Ä–µ–π—Å–∞
        data[4],                   # H –†–µ–π—Å
        data[5],                   # I –ê–¥—Ä–µ—Å –û—Ç–ø—Ä
        data[6],                   # J –ê–¥—Ä–µ—Å –ü—Ä–∏–±
        data[7],                   # K –ö–æ–ª-–≤–æ –ü–∞—Å—Å
        data[8],                   # L –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π
        data[9],                   # M –§–ò–û
        data[10],                  # N –¢–µ–ª–µ—Ñ–æ–Ω
        data[11],                  # O –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏
        data[12],                  # P –¢–∞—Ä–∏—Ñ
        data[13],                  # Q –ü–ª–∞—Ç–∫–∞
        data[14]                   # R –ö—Ä–µ—Å–ª–æ
    ]

    sheet.update(f"A{order_index + 1}:R{order_index + 1}", [updated_row])

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    if admin_chat_id:
        bot.send_message(admin_chat_id,
                         f"üìù –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.")
    return True

@bot.callback_query_handler(func=lambda call: call.data.startswith("generate_message_"))
def generate_message_for_admin(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    orders = sheet.get_all_values()
    order = next((o for o in orders if o[0] == order_id), None)
    if not order:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    driver_username = order[1]
    driver_username_clean = driver_username.lstrip('@')

    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE username = ?', (driver_username_clean,))
    driver = cursor.fetchone()
    conn.close()

    if not driver:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è {driver_username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    admin_message = (
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {order[4]} –≤ {order[5]} –ø–æ –∞–¥—Ä–µ—Å—É {order[8]} –í–∞—Å –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å "
        f"{driver[4]} {driver[6]}, {driver[5]}, –≤–æ–¥–∏—Ç–µ–ª—å {driver[3]} {driver[2]}."
    )

    bot.send_message(chat_id, admin_message)



##############################################
# ADDED: Inline ‚ÄúCancel‚Äù button creation
##############################################
def get_cancel_markup(callback_data="cancel_application"):
    """
    Returns an InlineKeyboardMarkup with a single button:
    ‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    """
    markup = InlineKeyboardMarkup()
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data=callback_data)
    markup.add(cancel_btn)
    return markup


##############################################
# ADDED: Callback to handle ‚ÄúCancel‚Äù presses
##############################################
@bot.callback_query_handler(func=lambda c: c.data == "cancel_application")
def cancel_application_callback(c):
    chat_id = c.message.chat.id
    # Clear any stored data for this user
    if chat_id in user_data:
        del user_data[chat_id]
    # Terminate any step-handler
    bot.clear_step_handler_by_chat_id(chat_id)

    bot.answer_callback_query(c.id, "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    bot.send_message(chat_id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.")


##############################################
# –ö–æ–º–∞–Ω–¥—ã /start –∏ /admin
##############################################

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    bot.clear_step_handler_by_chat_id(chat_id)  # –°–±—Ä–æ—Å step-—Ö–µ–Ω–¥–ª–µ—Ä–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    create_order_button = KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    my_orders_button = KeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏")
    tariffs_button = KeyboardButton("–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥")
    driver_button = KeyboardButton("üöñ –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    markup.add(create_order_button, my_orders_button, tariffs_button, driver_button)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(commands=['admin'])
def admin_login(message):
    chat_id = message.chat.id
    bot.clear_step_handler_by_chat_id(chat_id)  # –°–±—Ä–æ—Å step-—Ö–µ–Ω–¥–ª–µ—Ä–∞
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(message, check_admin_password)


def check_admin_password(message):
    global admin_chat_id
    if message.text == ADMIN_PASSWORD:
        admin_chat_id = message.chat.id
        bot.send_message(message.chat.id, "‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        show_admin_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")


def show_admin_menu(chat_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    all_orders_button = KeyboardButton("–í—Å–µ –∑–∞—è–≤–∫–∏")
    all_drivers_button = KeyboardButton("–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏")
    markup.add(all_orders_button, all_drivers_button)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def admin_confirm_order(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    if set_cell_color(order_id, {"red": 0.0, "green": 1.0, "blue": 0.0}):  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        bot.send_message(chat_id, f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ–∫—Ä–∞—à–µ–Ω–∞ –≤ –∑–µ–ª–µ–Ω—ã–π.")
    else:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —è—á–µ–π–∫–∏.")
##############################################
# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ —è—á–µ–µ–∫ (–Ω–µ –º–µ–Ω—è–ª–∞—Å—å)
##############################################
def set_cell_color(order_id, color):
    orders = sheet.get_all_values()
    order_index = next((index for index, o in enumerate(orders) if o[0] == order_id), None)
    if order_index is None:
        return False

    body = {
        "requests": [
            {
                "repeatCell": {
                    "range": {
                        "sheetId": sheet.id,
                        "startRowIndex": order_index,
                        "endRowIndex": order_index + 1,
                        "startColumnIndex": 0,
                        "endColumnIndex": 1
                    },
                    "cell": {
                        "userEnteredFormat": {
                            "backgroundColor": color
                        }
                    },
                    "fields": "userEnteredFormat.backgroundColor"
                }
            }
        ]
    }
    sheet.spreadsheet.batch_update(body)
    return True


##############################################
# ADDED: Universal callback router
##############################################
@bot.callback_query_handler(func=lambda call: True, middlewares=None)
def universal_callback_router(call):
    chat_id = call.message.chat.id
    bot.clear_step_handler_by_chat_id(chat_id)

    if call.data.startswith("admin_order_"):
        admin_order_details(call)
    elif call.data.startswith("admin_delete_"):
        admin_delete_order(call)
    elif call.data.startswith("admin_confirm_"):
        admin_confirm_order(call)
    elif call.data.startswith("notify_"):
        notify_client(call)
    elif call.data.startswith("client_confirm_"):
        handle_client_confirm(call)
    elif call.data.startswith("client_question_"):
        handle_client_question(call)
    elif call.data.startswith("client_confirm_replace_"):
        handle_client_confirm_replace(call)
    elif call.data.startswith("client_question_replace_"):
        handle_client_question_replace(call)
    elif call.data.startswith("attach_driver_"):
        attach_driver(call)
    elif call.data in ["confirm_attach_driver", "cancel_attach_driver"]:
        if call.data == "confirm_attach_driver":
            confirm_attach_driver(call)
        else:
            cancel_attach_driver(call)
    elif call.data in tariffs:
        tariff_selection(call)
    elif call.data.startswith("platka_"):
        platka_selection(call)
    elif call.data.startswith("chair_"):
        chair_selection(call)
    elif call.data in ["flight_type_departure", "flight_type_arrival"]:
        process_flight_type(call)

    # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    elif re.match(r"^(departure|arrival)_category_(airports|railways)_\d+$", call.data):
        process_address_category(call)
    elif re.match(r"^(departure|arrival)_back_category_\d+$", call.data):
        process_back_to_category(call)

    elif "_addr_" in call.data:
        process_popular_address(call)

    elif call.data == "confirm":
        confirm_order(call)
    elif call.data == "edit":
        edit_order(call)
    elif call.data == "create_return_trip":
        create_return_trip_callback(call)
    elif call.data == "skip_return_trip":
        skip_return_trip_callback(call)
    elif call.data.startswith("edit_"):
        if call.data.startswith("edit_tariff_confirm_"):
            confirm_edit_tariff(call)
        elif call.data.startswith("edit_platka_confirm_"):
            confirm_edit_platka(call)
        elif call.data.startswith("edit_chair_confirm_"):
            confirm_edit_chair(call)
        elif call.data.startswith("edit_order_"):
            edit_order_details(call)
        elif "_confirm_" not in call.data:
            select_field_to_edit(call)
    elif call.data == "cancel_edit":
        cancel_edit(call)
    elif call.data.startswith("edit_tariff_"):
        edit_tariff_callback(call)
    elif call.data.startswith("order_"):
        order_details(call)
    elif call.data.startswith("delete_"):
        delete_order(call)
    elif call.data == "update_driver_info":
        update_driver_info(call)
    elif call.data.startswith("driver_"):
        show_driver_details(call)
    else:
        bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")



@bot.message_handler(func=lambda message: message.chat.id == admin_chat_id and message.text == "–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏")
def show_all_drivers(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, name, car_brand FROM drivers')
    drivers = cursor.fetchall()
    conn.close()

    if not drivers:
        bot.send_message(message.chat.id, "–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    markup = InlineKeyboardMarkup()
    for driver in drivers:
        user_id, name, car_brand = driver
        markup.add(InlineKeyboardButton(f"{name} ({car_brand})", callback_data=f"driver_{user_id}"))

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:", reply_markup=markup)


def show_driver_details(call):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    chat_id = call.message.chat.id
    user_id = call.data.split("_")[1]

    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE user_id = ?', (user_id,))
    driver = cursor.fetchone()
    conn.close()

    if not driver:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    driver_info = (
        f"üöñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ:*\n"
        f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{driver[1]}\n"
        f"üë§ –ò–º—è: {driver[2]}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver[3]}\n"
        f"üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {driver[4]}\n"
        f"üé® –¶–≤–µ—Ç –º–∞—à–∏–Ω—ã: {driver[6]}\n"
        f"üî¢ –ì–æ—Å –Ω–æ–º–µ—Ä: {driver[5]}"
    )
    bot.send_message(chat_id, driver_info, parse_mode="Markdown")






##############################################
# –ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
##############################################
@bot.message_handler(func=lambda message: message.chat.id == admin_chat_id and message.text == "–í—Å–µ –∑–∞—è–≤–∫–∏")
def show_all_orders(message):
    orders = sheet.get_all_values()
    if not orders:
        bot.send_message(message.chat.id, "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return

    markup = InlineKeyboardMarkup()
    for order in orders:
        markup.add(InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ ‚Ññ{order[0]}",
                                        callback_data=f"admin_order_{order[0]}"))

    bot.send_message(message.chat.id, "–í—Å–µ –∑–∞—è–≤–∫–∏:", reply_markup=markup)


def admin_order_details(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]
    orders = sheet.get_all_values()

    order = next((o for o in orders if o[0] == order_id), None)
    if not order:
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    full_data = (
        f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{order[0]}*\n\n"
        f"üöñ *–í–æ–¥–∏—Ç–µ–ª—å:* {order[1]}\n"
        f"üë§ *–ó–∞–∫–∞–∑—á–∏–∫:* {order[2]}\n"
        f"üìÖ *–í –∞—ç—Ä–æ–ø–æ—Ä—Ç/–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞:* {order[3]}\n"
        f"üìÖ *–î–∞—Ç–∞:* {order[4]}\n"
        f"‚è∞ *–ü–æ–¥–∞—á–∞ –≤:* {order[5]}\n"
        f"‚è∞ *–í—Ä–µ–º—è —Ä–µ–π—Å–∞:* {order[6]}\n"
        f"‚úàÔ∏è *–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:* {order[7]}\n"
        f"üìç *–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {order[8]}\n"
        f"üìç *–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:* {order[9]}\n"
        f"üßë‚Äçü§ù‚Äçüßë *–ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {order[10]}\n"
        f"üë∂üèª *–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π:* {order[11]}\n"
        f"üë§ *–§–ò–û:* {order[12]}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {order[13]}\n"
        f"‚ÑπÔ∏è *–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:* {order[14]}\n"
        f"üöó *–¢–∞—Ä–∏—Ñ:* {order[15]}\n"
        f"üèéÔ∏è *–ü–ª–∞—Ç–∫–∞:* {order[16]}\n"
        f"üí∫ *–ö—Ä–µ—Å–ª–æ:* {order[17]}"
    )

    markup = InlineKeyboardMarkup()
    confirm_button = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", callback_data=f"admin_confirm_{order_id}")
    delete_button = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"admin_delete_{order_id}")
    attach_driver_button = InlineKeyboardButton("üöñ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"attach_driver_{order_id}")
    notify_button = InlineKeyboardButton("üîî –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"notify_{order_id}")
    generate_message_button = InlineKeyboardButton("üì© –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"generate_message_{order_id}")

    markup.add(confirm_button, attach_driver_button)
    markup.add(notify_button, delete_button)
    markup.add(generate_message_button)

    bot.send_message(chat_id, full_data, parse_mode="Markdown", reply_markup=markup)



def admin_delete_order(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]
    orders = sheet.get_all_values()
    order_index = next((index for index, o in enumerate(orders) if o[0] == order_id), None)

    if order_index is None:
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    sheet.delete_rows(order_index + 1)
    bot.send_message(chat_id, f"–ó–∞—è–≤–∫–∞ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω–∞.")


##############################################
# –ê–¥–º–∏–Ω: –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ / –≤–æ–¥–∏—Ç–µ–ª—è
##############################################
def notify_client(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[1]

    client_chat_id = get_chat_id_by_order_id(order_id)
    if not client_chat_id:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ chat_id –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    orders = sheet.get_all_values()
    order = next((o for o in orders if o[0] == order_id), None)
    if not order:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    driver_username = order[1]
    driver_username_clean = driver_username.lstrip('@')

    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE username = ?', (driver_username_clean,))
    driver = cursor.fetchone()
    conn.close()

    if not driver:
        bot.send_message(chat_id,
                         f"‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è {driver_username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—á–Ω–æ–π –ø–æ–¥–∞—á–∏
    flight_time_str = order[6]
    flight_date_str = order[4]
    dispatch_time_str = order[5]
    dispatch_date = flight_date_str

    try:
        flight_time = datetime.datetime.strptime(flight_time_str, "%H:%M").time()
        dispatch_time = datetime.datetime.strptime(dispatch_time_str, "%H:%M").time()

        if dispatch_time > flight_time:
            # –ó–Ω–∞—á–∏—Ç –ø–æ–¥–∞—á–∞ ‚Äî –Ω–∞–∫–∞–Ω—É–Ω–µ –≤–µ—á–µ—Ä–æ–º
            flight_date = datetime.datetime.strptime(flight_date_str, "%d.%m.%Y")
            dispatch_date = (flight_date - datetime.timedelta(days=1)).strftime("%d.%m.%Y")
    except Exception as e:
        dispatch_date = flight_date_str  # fallback

    client_message = (
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {dispatch_date} –≤ {order[5]} –ø–æ –∞–¥—Ä–µ—Å—É {order[8]} –í–∞—Å –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å "
        f"{driver[4]} {driver[6]}, {driver[5]}, –≤–æ–¥–∏—Ç–µ–ª—å {driver[3]} {driver[2]}. "
        f"–°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

    markup = InlineKeyboardMarkup()
    confirm_button = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"client_confirm_{order_id}")
    question_button = InlineKeyboardButton("‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"client_question_{order_id}")
    markup.add(confirm_button, question_button)

    try:
        bot.send_message(client_chat_id, client_message, reply_markup=markup)
        bot.send_message(chat_id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—è–≤–∫–∏ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω.")

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
        driver_chat_id = driver[0]
        driver_message = (
            f"üöñ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id}.\n"
            f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {dispatch_date}\n"
            f"–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {order[5]}\n"
            f"–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: {order[8]}\n"
            f"üìç –ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è: {order[9]}\n"
            f"üßë‚Äçü§ù‚Äçüßë –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {order[10]}, üë∂üèª –î–µ—Ç–µ–π: {order[11]}\n"
            f"üí∫ –ö—Ä–µ—Å–ª–æ: {order[17]}, üèéÔ∏è –ü–ª–∞—Ç–∫–∞: {order[16]}\n"
            f"üöó –¢–∞—Ä–∏—Ñ: {order[15]}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order[12]}, –¢–µ–ª–µ—Ñ–æ–Ω: {order[13]}"
        )

        bot.send_message(driver_chat_id, driver_message)
        bot.send_message(chat_id, f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

    except telebot.apihelper.ApiTelegramException as e:
        if "chat not found" in str(e):
            bot.send_message(chat_id,
                             f"‚ùå –û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (chat_id: {client_chat_id} –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å).")
        else:
            bot.send_message(chat_id,
                             f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")




def handle_client_confirm(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    bot.send_message(admin_chat_id,
                     f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—è–≤–∫–∏ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    set_cell_color(order_id, {"red": 0.0, "green": 1.0, "blue": 0.0})
    bot.send_message(chat_id,
                     "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.")


def handle_client_question(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    bot.send_message(admin_chat_id,
                     f"‚ùì –ö–ª–∏–µ–Ω—Ç –∑–∞—è–≤–∫–∏ ‚Ññ{order_id} –∏–º–µ–µ—Ç –≤–æ–ø—Ä–æ—Å—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.")
    set_cell_color(order_id, {"red": 1.0, "green": 0.0, "blue": 0.0})
    bot.send_message(chat_id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")


def handle_client_confirm_replace(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    set_cell_color(order_id, {"red": 0.0, "green": 1.0, "blue": 0.0})
    if admin_chat_id:
        bot.send_message(admin_chat_id,
                         f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ.")

    bot.send_message(chat_id,
                     "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.")


def handle_client_question_replace(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    set_cell_color(order_id, {"red": 1.0, "green": 0.0, "blue": 0.0})
    if admin_chat_id:
        bot.send_message(admin_chat_id,
                         f"‚ùì –ö–ª–∏–µ–Ω—Ç –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id} –∏–º–µ–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–º–µ–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è.")

    bot.send_message(chat_id,
                     "–ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")


##############################################
# –ê–¥–º–∏–Ω: –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –∫ –∑–∞—è–≤–∫–µ
##############################################
def attach_driver(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]

    user_data[chat_id] = {"order_id": order_id, "action": "attach_driver"}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤–æ–¥–∏—Ç–µ–ª—è (–±–µ–∑ @):")
    bot.register_next_step_handler_by_chat_id(chat_id, process_driver_input)


def process_driver_input(message):
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get("action") != "attach_driver":
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    user_data[chat_id]["driver_info"] = message.text.strip()

    markup = InlineKeyboardMarkup()
    confirm_button = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_attach_driver")
    cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_attach_driver")
    markup.add(confirm_button, cancel_button)

    bot.send_message(chat_id,
                     f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è: {message.text}?",
                     reply_markup=markup)


def confirm_attach_driver(call):
    chat_id = call.message.chat.id
    if (chat_id not in user_data
            or user_data[chat_id].get("action") != "attach_driver"):
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    order_id = user_data[chat_id]["order_id"]
    new_driver_info = user_data[chat_id]["driver_info"]

    orders = sheet.get_all_values()
    order_index = next((index for index, o in enumerate(orders) if o[0] == order_id), None)
    if order_index is None:
        bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    old_driver_username = orders[order_index][1].lstrip("@").strip()
    sheet.update_cell(order_index + 1, 2, new_driver_info)  # B –∫–æ–ª–æ–Ω–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å

    bot.send_message(chat_id,
                     f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {new_driver_info} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –∑–∞—è–≤–∫–µ ‚Ññ{order_id}.")

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_chat_id = get_chat_id_by_order_id(order_id)
    if not client_chat_id:
        bot.send_message(chat_id,
                         "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ chat_id –∫–ª–∏–µ–Ω—Ç–∞.")
    else:
        clean_username = new_driver_info.lstrip('@')
        conn = sqlite3.connect('users_orders.db')
        cursor = conn.cursor()
        cursor.execute(
            'SELECT * FROM drivers WHERE username = ? OR phone = ?',
            (clean_username, clean_username)
        )
        driver_data = cursor.fetchone()
        conn.close()

        if driver_data:
            orders = sheet.get_all_values()
            order = next((o for o in orders if o[0] == order_id), None)
            if order:
                msg_text = (
                    f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n"
                    f"–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å: {driver_data[2]}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver_data[3]}\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {driver_data[4]} {driver_data[5]}, –≥–æ—Å–Ω–æ–º–µ—Ä {driver_data[6]}\n\n"
                    f"–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω."
                )
                try:
                    bot.send_message(client_chat_id, msg_text)
                    bot.send_message(chat_id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–ø–æ–≤–µ—â—ë–Ω –æ —Å–º–µ–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è.")

                    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                    driver_message = (
                        f"üöñ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n"
                        f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id}.\n"
                        f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {order[4]}\n"
                        f"–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {order[5]}\n"
                        f"–ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: {order[8]}\n"
                        f"üìç –ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è: {order[9]}\n"
                        f"üßë‚Äçü§ù‚Äçüßë –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {order[10]}, üë∂üèª –î–µ—Ç–µ–π: {order[11]}\n"
                        f"üí∫ –ö—Ä–µ—Å–ª–æ: {order[17]}, üèéÔ∏è –ü–ª–∞—Ç–∫–∞: {order[16]}\n"
                        f"üöó –¢–∞—Ä–∏—Ñ: {order[15]}\n"
                        f"–ö–ª–∏–µ–Ω—Ç: {order[12]}, –¢–µ–ª–µ—Ñ–æ–Ω: {order[13]}"
                    )
                    bot.send_message(driver_data[0], driver_message)

                    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                    if old_driver_username and old_driver_username != clean_username:
                        conn = sqlite3.connect('users_orders.db')
                        cursor = conn.cursor()
                        cursor.execute(
                            'SELECT user_id FROM drivers WHERE username = ?',
                            (old_driver_username,)
                        )
                        old_driver_result = cursor.fetchone()
                        conn.close()
                        if old_driver_result:
                            bot.send_message(
                                old_driver_result[0],
                                f"‚ÑπÔ∏è –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –∑–∞—è–≤–∫–∏ ‚Ññ{order_id}."
                            )

                except telebot.apihelper.ApiTelegramException as e:
                    bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å: {e}")
        else:
            bot.send_message(chat_id,
                             "‚ùå –ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ (drivers). –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    del user_data[chat_id]

def cancel_attach_driver(call):
    chat_id = call.message.chat.id
    if chat_id in user_data and user_data[chat_id].get("action") == "attach_driver":
        del user_data[chat_id]

    bot.send_message(chat_id, "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")


##############################################
# –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥
##############################################
@bot.message_handler(func=lambda message: message.text == "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥")
def show_tariffs(message):
    tariffs_text = "üöó *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:*\n\n"
    for key, value in tariffs.items():
        tariffs_text += f"‚Ä¢ {value}\n"
    bot.send_message(message.chat.id, tariffs_text, parse_mode="Markdown")


##############################################
# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥)
##############################################

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_order(message):
    start_order(message.chat.id)


def start_order(chat_id):
    user_data[chat_id] = []
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn_departure = types.InlineKeyboardButton("–í –∞—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="flight_type_departure")
    btn_arrival = types.InlineKeyboardButton("–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞", callback_data="flight_type_arrival")
    keyboard.add(btn_departure, btn_arrival)
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, —ç—Ç–æ –í–∞–º –Ω—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç –∏–ª–∏ –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞?", reply_markup=keyboard)


def process_flight_type(call):
    chat_id = call.message.chat.id
    flight_type = "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç" if call.data == "flight_type_departure" else "–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞"
    user_data[chat_id].append(flight_type)  # data[0]

    bot.answer_callback_query(call.id)

    if flight_type == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        bot.send_message(
            chat_id,
            "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025):",
            reply_markup=get_cancel_markup()
        )
    else:
        bot.send_message(
            chat_id,
            "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025):",
            reply_markup=get_cancel_markup()
        )

    bot.register_next_step_handler_by_chat_id(chat_id, step_flight_date)


def step_flight_date(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", text):
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025):",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler_by_chat_id(chat_id, step_flight_date)
        return

    user_data[chat_id].append(text)  # data[1] = –î–∞—Ç–∞
    bot.send_message(
        chat_id,
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–µ–π—Å–∞ (–ß–ß:–ú–ú):",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, step_flight_time)


def step_flight_time(message):
    chat_id = message.chat.id
    text = message.text.strip()
    try:
        flight_dt = datetime.datetime.strptime(text, "%H:%M")
    except ValueError:
        bot.send_message(
            chat_id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler_by_chat_id(chat_id, step_flight_time)
        return

    user_data[chat_id].append(text)  # data[2] = –í—Ä–µ–º—è —Ä–µ–π—Å–∞
    flight_type = user_data[chat_id][0]

    if flight_type == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        dispatch_dt = flight_dt - datetime.timedelta(hours=7)
    else:
        dispatch_dt = flight_dt

    dispatch_str = dispatch_dt.strftime("%H:%M")
    user_data[chat_id].append(dispatch_str)  # data[3] = –ü–æ–¥–∞—á–∞

    bot.send_message(
        chat_id,
        "‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞:",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, flight_number)


def flight_number(message):
    chat_id = message.chat.id
    user_data[chat_id].append(message.text)  # data[4]
    flight_type = user_data[chat_id][0]

    if flight_type == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        bot.send_message(
            chat_id,
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler_by_chat_id(chat_id, process_custom_departure_address)
    else:
        show_popular_addresses(chat_id, "departure", 5, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")


def process_custom_departure_address(message):
    chat_id = message.chat.id
    user_data[chat_id].append(message.text)  # data[5]
    show_popular_addresses(chat_id, "arrival", 6, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:")


def show_popular_addresses(chat_id, prefix, field_index, text_for_user):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç—ã", callback_data=f"{prefix}_category_airports_{field_index}"),
        InlineKeyboardButton("üöâ –í–æ–∫–∑–∞–ª—ã", callback_data=f"{prefix}_category_railways_{field_index}")
    )
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))
    bot.send_message(chat_id, text_for_user, reply_markup=markup)

airports = [
    "–®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–î–æ–º–æ–¥–µ–¥–æ–≤–æ (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–í–Ω—É–∫–æ–≤–æ (–∞—ç—Ä–æ–ø–æ—Ä—Ç)",
    "–ñ—É–∫–æ–≤—Å–∫–∏–π (–∞—ç—Ä–æ–ø–æ—Ä—Ç)"
]

railway_stations = [
    "–ö–∞–∑–∞–Ω—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ö–∏–µ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ü–∞–≤–µ–ª–µ—Ü–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ö—É—Ä—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–†–∏–∂—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)",
    "–°–∞–≤–µ–ª–æ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª (–≤–æ–∫–∑–∞–ª)"
]

@bot.callback_query_handler(func=lambda call: re.match(r"^(departure|arrival)_category_(airports|railways)_\d+$", call.data))
def process_address_category(call):
    chat_id = call.message.chat.id
    parts = call.data.split("_")
    prefix = parts[0]  # departure / arrival
    category = parts[2]  # airports / railways
    field_index = int(parts[3])

    address_list = airports if category == "airports" else railway_stations

    markup = InlineKeyboardMarkup(row_width=1)
    for i, addr in enumerate(address_list):
        callback_data = f"{prefix}_addr_idx_{i}"
        markup.add(InlineKeyboardButton(addr, callback_data=callback_data))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"{prefix}_back_category_{field_index}"))

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: re.match(r"^(departure|arrival)_back_category_\d+$", call.data))
def process_back_to_category(call):
    chat_id = call.message.chat.id
    parts = call.data.split("_")
    prefix = parts[0]
    field_index = int(parts[3])
    show_popular_addresses(chat_id, prefix, field_index, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–¥—Ä–µ—Å–∞:")


def process_popular_address(call):
    chat_id = call.message.chat.id
    parts = call.data.split("_addr_")  # e.g. ["departure","idx_0"] or ["departure","custom_5"]
    prefix = parts[0]
    remainder = parts[1]

    if remainder.startswith("custom_"):
        field_index = int(remainder.split("_")[1])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
        bot.answer_callback_query(call.id)
        bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
            reply_markup=get_cancel_markup()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
        user_data[chat_id] = {
            "prefix": prefix,
            "field_index": field_index,
            "custom_addr": True
        }
        bot.register_next_step_handler_by_chat_id(chat_id, process_custom_address)

    elif remainder.startswith("idx_"):
        i = int(remainder.split("_")[1])
        address = popular_addresses[i]
        bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {address}")

        if prefix == "departure":
            field_index = 5
        else:
            field_index = 6

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ user_data[chat_id] –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        while len(user_data[chat_id]) <= field_index:
            user_data[chat_id].append(None)
        user_data[chat_id][field_index] = address

        if prefix == "departure":
            flight_type = user_data[chat_id][0]
            if flight_type == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
                show_popular_addresses(chat_id, "arrival", 6, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:")
            else:
                bot.send_message(
                    chat_id,
                    "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
                    reply_markup=get_cancel_markup()
                )
                bot.register_next_step_handler_by_chat_id(chat_id, process_custom_arrival_address)
        else:
            bot.send_message(
                chat_id,
                "üßë‚Äçü§ù‚Äçüßë –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
                reply_markup=get_cancel_markup()
            )
            bot.register_next_step_handler_by_chat_id(chat_id, passengers_count)


def process_custom_arrival_address(message):
    chat_id = message.chat.id
    user_data[chat_id].append(message.text)  # data[6]
    bot.send_message(
        chat_id,
        "üßë‚Äçü§ù‚Äçüßë –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, passengers_count)


def passengers_count(message):
    chat_id = message.chat.id
    if not validate_passenger_count(message.text):
        bot.send_message(
            chat_id,
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler(message, passengers_count)
        return

    user_data[chat_id].append(message.text)  # data[7]
    bot.send_message(
        chat_id,
        "üë∂üèª –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler(message, children_count)


def children_count(message):
    chat_id = message.chat.id
    if not validate_children_count(message.text):
        bot.send_message(
            chat_id,
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10 (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler(message, children_count)
        return

    user_data[chat_id].append(message.text)  # data[8]

    if int(message.text) > 0:
        markup = InlineKeyboardMarkup()
        for option in chair_options:
            markup.add(InlineKeyboardButton(option, callback_data=f"chair_{option}"))
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))
        bot.send_message(chat_id, "üí∫ –ù—É–∂–Ω–æ –ª–∏ –¥–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ?", reply_markup=markup)
    else:
        user_data[chat_id].append("–ù–µ—Ç")  # data[9] = –ö—Ä–µ—Å–ª–æ (–µ—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Ç)
        bot.send_message(
            chat_id,
            "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û:",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler(message, full_name)


def chair_selection(call):
    chat_id = call.message.chat.id
    choice = call.data.split("_")[1]
    user_data[chat_id].append(choice)  # data[9]

    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—Ä–µ—Å–ª–æ: {choice}")
    bot.send_message(
        chat_id,
        "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û:",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, full_name)


def full_name(message):
    chat_id = message.chat.id
    if not validate_fio(message.text):
        bot.send_message(
            chat_id,
            "‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler(message, full_name)
        return

    user_data[chat_id].append(message.text)  # data[10]
    bot.send_message(
        chat_id,
        "‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (11 —Ü–∏—Ñ—Ä):",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler(message, phone_number)


def phone_number(message):
    chat_id = message.chat.id
    if not validate_phone_number(message.text):
        bot.send_message(
            chat_id,
            "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ 11 —Ü–∏—Ñ—Ä, –±–µ–∑ + –∏ –ø—Ä–æ–±–µ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler(message, phone_number)
        return

    user_data[chat_id].append(message.text)  # data[11]
    bot.send_message(
        chat_id,
        "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler(message, referral)


def referral(message):
    chat_id = message.chat.id
    text = message.text.strip()
    if not validate_referral(text):
        bot.send_message(
            chat_id,
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler(message, referral)
        return

    user_data[chat_id].append(text)  # data[12]

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã —Å —É—á—ë—Ç–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    try:
        passengers = int(user_data[chat_id][7])
    except ValueError:
        passengers = 1

    available_tariffs = {}
    for key, value in tariffs.items():
        if "3 –ø–∞—Å—Å–∞–∂–∏—Ä–∞" in value and passengers <= 3:
            available_tariffs[key] = value
        elif "4 –ø–∞—Å—Å–∞–∂–∏—Ä–∞" in value and passengers <= 4:
            available_tariffs[key] = value
        elif "7 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤" in value and passengers <= 7:
            available_tariffs[key] = value
        elif "8 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤" in value and passengers <= 8:
            available_tariffs[key] = value

    markup = InlineKeyboardMarkup()
    for tkey, text_tariff in available_tariffs.items():
        markup.add(InlineKeyboardButton(text_tariff, callback_data=tkey))

    # Add ‚ÄúCancel‚Äù button
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.send_message(chat_id, "üöò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


def tariff_selection(call):
    chat_id = call.message.chat.id
    user_data[chat_id].append(tariffs[call.data])  # data[13]
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariffs[call.data]}")

    markup = InlineKeyboardMarkup()
    for option in platka_options:
        markup.add(InlineKeyboardButton(option, callback_data=f"platka_{option}"))

    # Cancel button
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.send_message(chat_id, "üèéÔ∏è –ü–ª–∞—Ç–∫–∞ (–¥–∞ –∏–ª–∏ –Ω–µ—Ç):", reply_markup=markup)


def platka_selection(call):
    chat_id = call.message.chat.id
    choice = call.data.split("_")[1]
    user_data[chat_id].append(choice)  # data[14]

    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç–∫—É: {choice}")
    send_summary(chat_id)


def send_summary(chat_id):
    data = user_data.get(chat_id, [])
    if len(data) < 15:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
        return

    summary = (
        f"üìù *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞:*\n"
        f"üìÖ –î–∞—Ç–∞: {data[1]}\n"
        f"‚úàÔ∏è –í –∞—ç—Ä–æ–ø–æ—Ä—Ç/–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞: {data[0]}\n"
        f"‚è∞ –í—Ä–µ–º—è —Ä–µ–π—Å–∞: {data[2]}\n"
        f"üöï –ü–æ–¥–∞—á–∞ –≤: {data[3]}\n"
        f"üõ´ –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞: {data[4]}\n"
        f"üìç –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data[5]}\n"
        f"üìç –ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è: {data[6]}\n"
        f"üßë‚Äçü§ù‚Äçüßë –ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {data[7]}\n"
        f"üë∂üèª –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π: {data[8]}\n"
        f"üí∫ –ö—Ä–µ—Å–ª–æ: {data[9]}\n"
        f"üë§ –§–ò–û: {data[10]}\n"
        f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {data[11]}\n"
        f"‚ÑπÔ∏è –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {data[12]}\n"
        f"üöò –¢–∞—Ä–∏—Ñ: {data[13]}\n"
        f"üèéÔ∏è –ü–ª–∞—Ç–∫–∞: {data[14]}"
    )

    markup = InlineKeyboardMarkup()
    confirm_button = InlineKeyboardButton("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm")
    edit_button = InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")
    markup.add(confirm_button, edit_button)

    # Cancel
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.send_message(chat_id, summary, parse_mode="Markdown", reply_markup=markup)


def confirm_order(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    data = user_data[chat_id]
    if len(data) < 15:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
        return

    application_number = generate_order_number()
    data.append(application_number)  # data[15]

    username = call.message.chat.username
    if not username or username.strip() == "":
        username = data[10] if len(data) > 10 and data[10] else "-"

    send_to_google_sheets(chat_id, username, data)
    add_order_to_db(chat_id, application_number, chat_id)

    bot.send_message(chat_id,
                     f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {application_number}")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞—è–≤–∫—É
    markup = InlineKeyboardMarkup()
    yes_button = InlineKeyboardButton("–î–∞", callback_data="create_return_trip")
    no_button = InlineKeyboardButton("–ù–µ—Ç", callback_data="skip_return_trip")
    markup.add(yes_button, no_button)
    bot.send_message(chat_id,
                     "–•–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é –ø–æ–µ–∑–¥–∫—É?",
                     reply_markup=markup)


def edit_order(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    markup = InlineKeyboardMarkup()
    fields = [
        ("0", "üìÖ –î–∞—Ç–∞"),
        ("1", "‚úàÔ∏è –í –∞—ç—Ä–æ–ø–æ—Ä—Ç/–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞"),
        ("2", "‚è∞ –í—Ä–µ–º—è —Ä–µ–π—Å–∞"),
        ("4", "üõ´ –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞"),
        ("5", "üìç –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
        ("6", "üìç –ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è"),
        ("7", "üßë‚Äçü§ù‚Äçüßë –ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"),
        ("8", "üë∂üèª –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π"),
        ("9", "üë§ –§–ò–û"),
        ("10", "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω"),
        ("11", "‚ÑπÔ∏è –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏"),
        ("12", "üöò –¢–∞—Ä–∏—Ñ"),
        ("13", "üèéÔ∏è –ü–ª–∞—Ç–∫–∞"),
        ("14", "üí∫ –ö—Ä–µ—Å–ª–æ"),
    ]
    for index, field_name in fields:
        markup.add(InlineKeyboardButton(field_name, callback_data=f"edit_{index}"))

    # Cancel
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


def select_field_to_edit(call):
    chat_id = call.message.chat.id
    field_key = call.data.replace("edit_", "", 1)

    try:
        field_index = int(field_key)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    if field_index == 12:
        # Edit tariff
        try:
            passengers = int(user_data[chat_id][7])
        except ValueError:
            passengers = 1

        available_tariffs = {}
        for key, value in tariffs.items():
            if "3 –ø–∞—Å—Å–∞–∂–∏—Ä–∞" in value and passengers <= 3:
                available_tariffs[key] = value
            elif "4 –ø–∞—Å—Å–∞–∂–∏—Ä–∞" in value and passengers <= 4:
                available_tariffs[key] = value
            elif "7 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤" in value and passengers <= 7:
                available_tariffs[key] = value
            elif "8 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤" in value and passengers <= 8:
                available_tariffs[key] = value

        markup = InlineKeyboardMarkup()
        for tariff_key, tariff_text in available_tariffs.items():
            callback = f"edit_tariff_confirm_{tariff_key}"
            markup.add(InlineKeyboardButton(tariff_text, callback_data=callback))

        # Cancel
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))
        bot.send_message(chat_id, "üöò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
        return

    elif field_index == 13:
        # Edit platka
        markup = InlineKeyboardMarkup()
        for option in platka_options:
            callback = f"edit_platka_confirm_{option}"
            markup.add(InlineKeyboardButton(option, callback_data=callback))

        # Cancel
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))
        bot.send_message(chat_id, "üèéÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–∫—É (–î–∞ –∏–ª–∏ –ù–µ—Ç):", reply_markup=markup)
        return

    elif field_index == 14:
        # Edit chair
        markup = InlineKeyboardMarkup()
        for option in chair_options:
            callback = f"edit_chair_confirm_{option}"
            markup.add(InlineKeyboardButton(option, callback_data=callback))

        # Cancel
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))
        bot.send_message(chat_id, "üí∫ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ—Å–ª–æ (–î–∞ –∏–ª–∏ –ù–µ—Ç):", reply_markup=markup)
        return

    # If it's a normal text field:
    if chat_id not in user_data or len(user_data[chat_id]) <= field_index:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ.")
        return

    current_value = user_data[chat_id][field_index]
    markup = InlineKeyboardMarkup()
    cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
    markup.add(cancel_button)

    bot.send_message(
        chat_id,
        f"üìù –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ:\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *{current_value}*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        parse_mode="Markdown",
        reply_markup=markup
    )
    bot.register_next_step_handler_by_chat_id(chat_id, process_field_edit, field_index)


def process_field_edit(message, field_index):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    user_data[chat_id][field_index] = message.text

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º "–ü–æ–¥–∞—á–∞" (data[3]) –µ—Å–ª–∏ –º–µ–Ω—è–ª–∏—Å—å [1] (–í—ã–ª–µ—Ç/–ü—Ä–∏–ª–µ—Ç) –∏–ª–∏ [2] (–í—Ä–µ–º—è —Ä–µ–π—Å–∞)
    if field_index in [1, 2]:
        recalc_dispatch_time(chat_id)

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –µ—â—ë –Ω–µ—Ç (–Ω–µ—Ç data[15]):
    if len(user_data[chat_id]) < 16:
        bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        send_summary(chat_id)
    else:
        # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ -> –æ–±–Ω–æ–≤–∏–º Google Sheets
        order_id = user_data[chat_id][15]
        if update_google_sheets(order_id, user_data[chat_id]):
            bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ!")
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.")


def recalc_dispatch_time(chat_id):
    data = user_data[chat_id]
    flight_type = data[1]
    try:
        flight_dt = datetime.datetime.strptime(data[2], "%H:%M")
    except ValueError:
        return
    if flight_type == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        dispatch_dt = flight_dt - datetime.timedelta(hours=7)
    else:
        dispatch_dt = flight_dt
    data[3] = dispatch_dt.strftime("%H:%M")


def cancel_edit(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    send_summary(chat_id)


##############################################
# –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ("–ú–æ–∏ –∑–∞—è–≤–∫–∏")
##############################################
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
def my_orders(message):
    chat_id = message.chat.id
    user_orders = get_user_orders(chat_id)
    if not user_orders:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    markup = InlineKeyboardMarkup()
    for order_id in user_orders:
        markup.add(InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ ‚Ññ{order_id}",
                                        callback_data=f"order_{order_id}"))
    bot.send_message(chat_id, "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def order_details(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[1]

    orders = sheet.get_all_values()
    order = next((o for o in orders if o[0] == order_id), None)
    if not order:
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    summary = (
        f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{order[0]}*\n\n"
        f"üöñ *–í–æ–¥–∏—Ç–µ–ª—å:* {order[1]}\n"
        f"üë§ *–ó–∞–∫–∞–∑—á–∏–∫:* {order[2]}\n"
        f"üìÖ *–í –∞—ç—Ä–æ–æ–ø–æ—Ä—Ç/–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞:* {order[3]}\n"
        f"üìÖ *–î–∞—Ç–∞:* {order[4]}\n"
        f"‚è∞ *–ü–æ–¥–∞—á–∞ –≤:* {order[5]}\n"
        f"‚è∞ *–í—Ä–µ–º—è —Ä–µ–π—Å–∞:* {order[6]}\n"
        f"‚úàÔ∏è *–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:* {order[7]}\n"
        f"üìç *–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {order[8]}\n"
        f"üìç *–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:* {order[9]}\n"
        f"üßë‚Äçü§ù‚Äçüßë *–ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {order[10]}\n"
        f"üë∂üèª *–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π:* {order[11]}\n"
        f"üë§ *–§–ò–û:* {order[12]}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {order[13]}\n"
        f"‚ÑπÔ∏è *–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:* {order[14]}\n"
        f"üöó *–¢–∞—Ä–∏—Ñ:* {order[15]}\n"
        f"üèéÔ∏è *–ü–ª–∞—Ç–∫–∞:* {order[16]}\n"
        f"üí∫ *–ö—Ä–µ—Å–ª–æ:* {order[17]}"
    )

    markup = InlineKeyboardMarkup()
    delete_button = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"delete_{order_id}")
    edit_button = InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"edit_order_{order_id}")
    markup.add(delete_button, edit_button)

    bot.send_message(chat_id, summary, parse_mode="Markdown", reply_markup=markup)


def delete_order(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[1]

    orders = sheet.get_all_values()
    order_index = next((index for index, o in enumerate(orders) if o[0] == order_id), None)
    if order_index is None:
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    sheet.delete_rows(order_index + 1)
    delete_order_from_db(chat_id, order_id)
    bot.send_message(chat_id, f"–ó–∞—è–≤–∫–∞ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω–∞.")


def edit_order_details(call):
    chat_id = call.message.chat.id
    order_id = call.data.split("_")[2]
    orders = sheet.get_all_values()

    order = next((o for o in orders if o[0] == order_id), None)
    if not order:
        bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    loaded_data = [
        order[4],   # 0 –î–∞—Ç–∞
        order[3],   # 1 –í—ã–ª–µ—Ç/–ü—Ä–∏–ª–µ—Ç
        order[6],   # 2 –í—Ä–µ–º—è —Ä–µ–π—Å–∞
        order[5],   # 3 –ü–æ–¥–∞—á–∞
        order[7],   # 4 –†–µ–π—Å
        order[8],   # 5 –ê–¥—Ä–µ—Å –û—Ç–ø—Ä
        order[9],   # 6 –ê–¥—Ä–µ—Å –ü—Ä–∏–±
        order[10],  # 7 –ü–∞—Å—Å
        order[11],  # 8 –î–µ—Ç–∏
        order[12],  # 9 –§–ò–û
        order[13],  # 10 –¢–µ–ª
        order[14],  # 11 –£–∑–Ω–∞–ª–∏
        order[15],  # 12 –¢–∞—Ä–∏—Ñ
        order[16],  # 13 –ü–ª–∞—Ç–∫–∞
        order[17],  # 14 –ö—Ä–µ—Å–ª–æ
        order[0]    # 15 –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    ]
    user_data[chat_id] = loaded_data

    markup = InlineKeyboardMarkup()
    fields = [
        ("0", "üìÖ –î–∞—Ç–∞"),
        ("1", "‚úàÔ∏è –í –∞—ç—Ä–æ–ø–æ—Ä—Ç/–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞"),
        ("2", "‚è∞ –í—Ä–µ–º—è —Ä–µ–π—Å–∞"),
        ("4", "üõ´ –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞"),
        ("5", "üìç –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
        ("6", "üìç –ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è"),
        ("7", "üßë‚Äçü§ù‚Äçüßë –ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"),
        ("8", "üë∂üèª –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π"),
        ("9", "üë§ –§–ò–û"),
        ("10", "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω"),
        ("11", "‚ÑπÔ∏è –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏"),
        ("12", "üöò –¢–∞—Ä–∏—Ñ"),
        ("13", "üèéÔ∏è –ü–ª–∞—Ç–∫–∞"),
        ("14", "üí∫ –ö—Ä–µ—Å–ª–æ"),
    ]
    for index, field_name in fields:
        markup.add(InlineKeyboardButton(field_name, callback_data=f"edit_{index}"))

    # Cancel
    # markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


##############################################
# –í–æ–∑–≤—Ä–∞—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞
##############################################
def create_return_trip_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data or len(user_data[chat_id]) < 16:
        bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π.")
        return

    old_data = user_data[chat_id]
    return_data = old_data[:15].copy()

    # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –∞–¥—Ä–µ—Å–∞
    old_departure = return_data[5]
    old_arrival = return_data[6]
    return_data[5] = old_arrival
    return_data[6] = old_departure

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º "–í—ã–ª–µ—Ç" <-> "–ü—Ä–∏–ª–µ—Ç"
    if return_data[0] == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        return_data[0] = "–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞"
    else:
        return_data[0] = "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç"

    user_data[chat_id] = return_data
    if len(user_data[chat_id]) == 16:
        user_data[chat_id].pop()

    bot.answer_callback_query(call.id)
    bot.send_message(
        chat_id,
        "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, return_trip_date)



def skip_return_trip_callback(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è.")
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /start.")


def return_trip_date(message):
    chat_id = message.chat.id
    text = message.text.strip()
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", text):
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler_by_chat_id(chat_id, return_trip_date)
        return

    user_data[chat_id][1] = text  # –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏ (index 1)
    bot.send_message(
        chat_id,
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–µ–π—Å–∞ (–ß–ß:–ú–ú):",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, return_trip_time)

def return_trip_time(message):
    chat_id = message.chat.id
    text = message.text.strip()
    try:
        flight_dt = datetime.datetime.strptime(text, "%H:%M")
    except ValueError:
        bot.send_message(
            chat_id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.",
            reply_markup=get_cancel_markup()
        )
        bot.register_next_step_handler_by_chat_id(chat_id, return_trip_time)
        return

    user_data[chat_id][2] = text  # –í—Ä–µ–º—è —Ä–µ–π—Å–∞ (index 2)
    flight_type = user_data[chat_id][0]  # –í—ã–ª–µ—Ç/–ü—Ä–∏–ª–µ—Ç

    if flight_type == "–í –∞—ç—Ä–æ–ø–æ—Ä—Ç":
        dispatch_dt = flight_dt - datetime.timedelta(hours=7)
    else:
        dispatch_dt = flight_dt

    user_data[chat_id][3] = dispatch_dt.strftime("%H:%M")  # –ü–æ–¥–∞—á–∞ (index 3)

    bot.send_message(
        chat_id,
        "‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–π—Å–∞:",
        reply_markup=get_cancel_markup()
    )
    bot.register_next_step_handler_by_chat_id(chat_id, return_trip_flight_number)



def return_trip_flight_number(message):
    chat_id = message.chat.id
    user_data[chat_id][4] = message.text
    send_summary(chat_id)


##############################################
# –ë–ª–æ–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
##############################################
def init_drivers_db():
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS drivers (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            name TEXT,
            phone TEXT,
            car_brand TEXT,
            car_color TEXT,
            car_number TEXT
        )
    ''')
    conn.commit()
    conn.close()


init_drivers_db()


@bot.message_handler(func=lambda message: message.text == "üöñ –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π")
def driver_registration(message):
    chat_id = message.chat.id
    username = message.from_user.username

    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE username = ?', (username,))
    driver = cursor.fetchone()
    conn.close()

    if driver:
        driver_info = (
            f"üöñ *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{driver[1]}\n"
            f"üë§ –ò–º—è: {driver[2]}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver[3]}\n"
            f"üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {driver[4]}\n"
            f"üé® –¶–≤–µ—Ç –º–∞—à–∏–Ω—ã: {driver[5]}\n"
            f"üî¢ –ì–æ—Å –Ω–æ–º–µ—Ä: {driver[6]}"
        )
        markup = InlineKeyboardMarkup()
        update_button = InlineKeyboardButton("üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="update_driver_info")
        markup.add(update_button)
        bot.send_message(chat_id, driver_info, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(chat_id,
                         "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—è.")
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler_by_chat_id(chat_id, process_driver_name)


def process_driver_name(message):
    chat_id = message.chat.id
    user_data[chat_id] = {"name": message.text}
    bot.send_message(chat_id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_driver_phone)


def process_driver_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]["phone"] = message.text
    bot.send_message(chat_id, "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_driver_car_brand)


def process_driver_car_brand(message):
    chat_id = message.chat.id
    user_data[chat_id]["car_brand"] = message.text
    bot.send_message(chat_id, "üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_driver_car_color)


def process_driver_car_color(message):
    chat_id = message.chat.id
    user_data[chat_id]["car_color"] = message.text
    bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_driver_car_number)


def process_driver_car_number(message):
    chat_id = message.chat.id
    user_data[chat_id]["car_number"] = message.text
    username = message.from_user.username

    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE user_id = ?', (chat_id,))
    existing_driver = cursor.fetchone()

    if existing_driver:
        cursor.execute('''
            UPDATE drivers
            SET username = ?, name = ?, phone = ?, car_brand = ?, car_color = ?, car_number = ?
            WHERE user_id = ?
        ''', (
            username,
            user_data[chat_id]["name"],
            user_data[chat_id]["phone"],
            user_data[chat_id]["car_brand"],
            user_data[chat_id]["car_color"],
            user_data[chat_id]["car_number"],
            chat_id
        ))
    else:
        cursor.execute('''
            INSERT INTO drivers (user_id, username, name, phone, car_brand, car_color, car_number)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            chat_id,
            username,
            user_data[chat_id]["name"],
            user_data[chat_id]["phone"],
            user_data[chat_id]["car_brand"],
            user_data[chat_id]["car_color"],
            user_data[chat_id]["car_number"]
        ))

    conn.commit()
    conn.close()

    bot.send_message(chat_id, "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


def update_driver_info(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler_by_chat_id(chat_id, process_driver_name)


@bot.message_handler(func=lambda message: message.chat.id == admin_chat_id and message.text == "–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏")
def show_all_drivers(message):
    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, name, car_brand FROM drivers')
    drivers = cursor.fetchall()
    conn.close()

    if not drivers:
        bot.send_message(message.chat.id, "–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    markup = InlineKeyboardMarkup()
    for driver in drivers:
        user_id, name, car_brand = driver
        markup.add(InlineKeyboardButton(f"{name} ({car_brand})",
                                        callback_data=f"driver_{user_id}"))

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:", reply_markup=markup)


def show_driver_details(call):
    chat_id = call.message.chat.id
    user_id = call.data.split("_")[1]

    conn = sqlite3.connect('users_orders.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE user_id = ?', (user_id,))
    driver = cursor.fetchone()
    conn.close()

    if not driver:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    driver_info = (
        f"üöñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ:*\n"
        f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{driver[1]}\n"
        f"üë§ –ò–º—è: {driver[2]}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver[3]}\n"
        f"üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {driver[4]}\n"
        f"üé® –¶–≤–µ—Ç –º–∞—à–∏–Ω—ã: {driver[6]}\n"
        f"üî¢ –ì–æ—Å –Ω–æ–º–µ—Ä: {driver[5]}"
    )
    bot.send_message(chat_id, driver_info, parse_mode="Markdown")




##############################################
# –ö–æ–º–∞–Ω–¥–∞ /order –¥–ª—è –∞–¥–º–∏–Ω–∞
##############################################
@bot.message_handler(commands=['order'])
def admin_order_info(message):
    if message.chat.id != admin_chat_id:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /order FB7QNFB3")
        return

    order_id = parts[1].strip()
    process_admin_order_request(message, order_id)


def process_admin_order_request(message, order_id):
    orders = sheet.get_all_values()
    order = next((o for o in orders if o[0] == order_id), None)
    if not order:
        bot.send_message(message.chat.id, f"‚ùå –ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    summary = (
        f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{order[0]}*\n\n"
        f"üöñ *–í–æ–¥–∏—Ç–µ–ª—å:* {order[1]}\n"
        f"üë§ *–ó–∞–∫–∞–∑—á–∏–∫:* {order[2]}\n"
        f"üìÖ *–í –∞—ç—Ä–æ–ø–æ—Ä—Ç/–ò–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞:* {order[3]}\n"
        f"üìÖ *–î–∞—Ç–∞:* {order[4]}\n"
        f"‚è∞ *–ü–æ–¥–∞—á–∞ –≤:* {order[5]}\n"
        f"‚è∞ *–í—Ä–µ–º—è —Ä–µ–π—Å–∞:* {order[6]}\n"
        f"‚úàÔ∏è *–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:* {order[7]}\n"
        f"üìç *–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {order[8]}\n"
        f"üìç *–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:* {order[9]}\n"
        f"üßë‚Äçü§ù‚Äçüßë *–ö–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:* {order[10]}\n"
        f"üë∂üèª *–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π:* {order[11]}\n"
        f"üë§ *–§–ò–û:* {order[12]}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {order[13]}\n"
        f"‚ÑπÔ∏è *–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:* {order[14]}\n"
        f"üöó *–¢–∞—Ä–∏—Ñ:* {order[15]}\n"
        f"üèéÔ∏è *–ü–ª–∞—Ç–∫–∞:* {order[16]}\n"
        f"üí∫ *–ö—Ä–µ—Å–ª–æ:* {order[17]}"
    )

    markup = InlineKeyboardMarkup()
    confirm_button = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", callback_data=f"admin_confirm_{order_id}")
    delete_button = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"admin_delete_{order_id}")
    attach_driver_button = InlineKeyboardButton("üöñ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"attach_driver_{order_id}")
    notify_button = InlineKeyboardButton("üîî –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"notify_{order_id}")
    generate_message_button = InlineKeyboardButton("üì© –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"generate_message_{order_id}")

    markup.add(confirm_button, attach_driver_button)
    markup.add(notify_button, delete_button)
    markup.add(generate_message_button)

    bot.send_message(message.chat.id, summary, parse_mode="Markdown", reply_markup=markup)


##############################################
# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
##############################################
def validate_phone_number(phone: str) -> bool:
    return bool(re.fullmatch(r"\d{11}", phone))

def validate_passenger_count(num_str: str) -> bool:
    if not num_str.isdigit():
        return False
    value = int(num_str)
    return 1 <= value <= 10

def validate_children_count(num_str: str) -> bool:
    if not num_str.isdigit():
        return False
    value = int(num_str)
    return 0 <= value <= 10

def validate_fio(fio: str) -> bool:
    return bool(re.fullmatch(r"[a-zA-Z–∞-—è–ê-–Ø\s]+", fio.strip()))

def validate_referral(ref: str) -> bool:
    return bool(re.fullmatch(r"[a-zA-Z–∞-—è–ê-–Ø\s]+", ref.strip()))


##############################################
# –ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞/–ø–ª–∞—Ç–∫–∏/–∫—Ä–µ—Å–ª–∞
##############################################
def edit_tariff_callback(call):
    chat_id = call.message.chat.id
    # Show available tariffs again or handle some logic
    # (left here as example if you prefer a separate approach)
    try:
        passengers = int(user_data[chat_id][7])
    except ValueError:
        passengers = 1
    available_tariffs = {}
    for key, value in tariffs.items():
        if "3 –ø–∞—Å—Å–∞–∂–∏—Ä–∞" in value and passengers <= 3:
            available_tariffs[key] = value
        elif "4 –ø–∞—Å—Å–∞–∂–∏—Ä–∞" in value and passengers <= 4:
            available_tariffs[key] = value
        elif "7 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤" in value and passengers <= 7:
            available_tariffs[key] = value
        elif "8 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤" in value and passengers <= 8:
            available_tariffs[key] = value

    markup = InlineKeyboardMarkup()
    for tkey, tval in available_tariffs.items():
        markup.add(InlineKeyboardButton(tval, callback_data=f"edit_tariff_confirm_{tkey}"))

    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", callback_data="cancel_application"))

    bot.send_message(chat_id, "üöò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)


def confirm_edit_tariff(call):
    chat_id = call.message.chat.id
    tariff_key = call.data.split("edit_tariff_confirm_")[1]  # 'standard', etc.
    user_data[chat_id][12] = tariffs[tariff_key]
    finalize_edit_update_sheet(chat_id)


def confirm_edit_platka(call):
    chat_id = call.message.chat.id
    choice = call.data.split("edit_platka_confirm_")[1]
    user_data[chat_id][13] = choice
    finalize_edit_update_sheet(chat_id)


def confirm_edit_chair(call):
    chat_id = call.message.chat.id
    choice = call.data.split("edit_chair_confirm_")[1]
    user_data[chat_id][14] = choice
    finalize_edit_update_sheet(chat_id)


def finalize_edit_update_sheet(chat_id):
    data = user_data[chat_id]
    if len(data) < 16:
        bot.send_message(chat_id, "‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        send_summary(chat_id)
    else:
        order_id = data[15]
        if update_google_sheets(order_id, data):
            bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ!")
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.")


##############################################
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
##############################################
if __name__ == "__main__":
    bot.polling(none_stop=True)